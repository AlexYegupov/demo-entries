{"version":3,"sources":["Logo.js","consts.js","Selector.js","Menu.js","api.js","App.js","serviceWorker.js","index.js"],"names":["Logo","_ref","src","react_default","a","createElement","className","style","backgroundImage","concat","Modes","DefaultMode","Selector","props","name","onChange","defaultChecked","e","target","value","children","map","c","i","type","Item","Selector_Item","Object","assign","key","objectSpread","label","id","htmlFor","Menu","items","_useState","useState","activeItem","_useState2","slicedToArray","state","setState","handleClick","getAttribute","item","data-key","onClick","getEntriesAPI","asyncToGenerator","regenerator_default","mark","_callee","mode","wrap","_context","prev","next","abrupt","Promise","resolve","reject","setTimeout","stop","_x","apply","this","arguments","getEntries","memoize","App","isEntriesActual","entries","_this","_this2","then","catch","error","alert","loadEntries","prevProps","prevState","snapshot","_this$state","Fragment","Selector_Selector","m","Menu_Menu","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sRAEeA,SAAA,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,IAAH,OACbC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,MAAO,CAAEC,gBAAe,OAAAC,OAASP,EAAT,UCH1CQ,EAAQ,CAAC,MAAO,SAChBC,EAAc,gBCCdC,EAAW,SAACC,GAAU,IAClBC,EAAmCD,EAAnCC,KAAMC,EAA6BF,EAA7BE,SAAUC,EAAmBH,EAAnBG,eAMxB,OACEb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAUS,SALN,SAACE,GAChBF,GAAUA,EAASE,EAAEC,OAAOC,SAK5BN,EAAMO,SAASC,IAAK,SAACC,EAAGC,GAAJ,OACpBD,EAAEE,OAASC,EACTtB,EAAAC,EAAAC,cAACqB,EAADC,OAAAC,OAAA,CAAMC,IAAKN,GAAXI,OAAAG,EAAA,EAAAH,CAAA,GAGY,CACDb,OACAE,eAAgBM,EAAET,MAAMM,QAAUH,GAEjCM,EAAET,SAIbS,MAMLG,EAAO,SAAAxB,GAA4C,IAAzCa,EAAyCb,EAAzCa,KAAMK,EAAmClB,EAAnCkB,MAAOY,EAA4B9B,EAA5B8B,MAAOf,EAAqBf,EAArBe,eAC5BgB,EAAE,GAAAvB,OAAMK,EAAN,KAAAL,OAAcU,GAEtB,OACEhB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAO2B,GAAIA,EAAIR,KAAK,QAAQV,KAAMA,EAAMK,MAAOA,EACxCH,eAAgBA,IACvBb,EAAAC,EAAAC,cAAA,SAAO4B,QAASD,GAAMD,YClCtBG,EAAO,SAAAjC,GAA0B,IAAvBK,EAAuBL,EAAvBK,UAAW6B,EAAYlC,EAAZkC,MAAYC,EACXC,mBAAU,CAACC,WAAY,OADZC,EAAAZ,OAAAa,EAAA,EAAAb,CAAAS,EAAA,GAC9BK,EAD8BF,EAAA,GACvBG,EADuBH,EAAA,GAG/BI,EAAc,SAAC1B,GACnByB,EAAS,CAAEJ,WAAYrB,EAAEC,OAAO0B,aAAa,eAG/C,OACEzC,EAAAC,EAAAC,cAAA,MAAIC,UAAWA,GACX6B,EAAMd,IACJ,SAACwB,EAAMtB,GAAP,OACEpB,EAAAC,EAAAC,cAAA,MAAIC,UAAWuC,IAASJ,EAAMH,WAAa,SAAW,GAAIT,IAAKN,EAC3DuB,WAAUD,EAAME,QAASJ,GAC1BE,OChBTG,EAAa,eAAA/C,EAAA0B,OAAAsB,EAAA,EAAAtB,CAAAuB,EAAA9C,EAAA+C,KAAG,SAAAC,EAAOC,GAAP,OAAAH,EAAA9C,EAAAkD,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAG,OAAA,SACpB,IAAIC,QACF,SAACC,EAASC,GAAV,OACEC,WACE,WACe,QAATT,GACFO,EAAQ,CAAC,SAAU,SAAU,SAAU,SAAU,WAGtC,UAATP,GACFO,EAAQ,CAAC,cAAe,cAAe,gBAGzCC,EAAO,eAET,QAfc,wBAAAN,EAAAQ,SAAAX,MAAH,gBAAAY,GAAA,OAAA/D,EAAAgE,MAAAC,KAAAC,YAAA,UCgBbC,QAAaC,GAAQrB,GAsEZsB,6MAhEb7B,MAAQ,CACNY,KAAM1C,EACN4D,iBAAiB,EACjBC,QAAS,MAIXzD,+CAAW,SAAAqC,EAAOjC,GAAP,OAAA+B,EAAA9C,EAAAkD,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACTgB,EAAK/B,SAAU,CAACW,KAAMlC,IADb,wBAAAoC,EAAAQ,SAAAX,yIAIG,IAAAsB,EAAAR,KACZE,EAAWF,KAAKzB,MAAMY,MAAMsB,KAC1B,SAACH,GAAD,OAAaE,EAAKhC,SAAS,CACzB8B,UACAD,iBAAiB,MAEnBK,MACA,SAACC,GAAD,OAAWC,MAAM,oEAKnBZ,KAAKa,yDAGYC,EAAWC,EAAWC,GACnChB,KAAKzB,MAAMY,OAAS4B,EAAU5B,MAChCa,KAAKxB,SAAU,CAAE6B,iBAAiB,IAG/BL,KAAKzB,MAAM8B,iBACdL,KAAKa,+CAIA,IAAAI,EACoCjB,KAAKzB,MAAxCY,EADD8B,EACC9B,KAAMkB,EADPY,EACOZ,gBAAiBC,EADxBW,EACwBX,QAE/B,OACErE,EAAAC,EAAAC,cAACF,EAAAC,EAAMgF,SAAP,KACEjF,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAACL,EAAD,CAAME,IAAI,cAEVC,EAAAC,EAAAC,cAACgF,EAAD,CAAUvE,KAAK,gBAAgBC,SAAUmD,KAAKnD,SAC5CC,eAAgBqC,GAEd3C,EAAMW,IAAK,SAACiE,EAAG/D,GAAJ,OAAUpB,EAAAC,EAAAC,cAACqB,EAAD,CAAMG,IAAKN,EAAGJ,MAAOmE,EAAGvD,MAAK,GAAAtB,OAAK6E,EAAL,eAMxDnF,EAAAC,EAAAC,cAAA,YACIkE,EACEpE,EAAAC,EAAAC,cAACkF,EAAD,CAAMpD,MAAOqC,EAASlE,UAAS,WAAAG,OAAa4C,KAC5ClD,EAAAC,EAAAC,cAAA,mCAzDImF,IAAMC,WCTJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7F,EAAAC,EAAAC,cAAC4F,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,KAAK,SAAA4B,GACjCA,EAAaC","file":"static/js/main.99c9d658.chunk.js","sourcesContent":["import React from 'react';\n\nexport default ({ src }) => (\n  <div className=\"logo\" style={{ backgroundImage: `url(${src})`}}></div>\n)\n","const Modes = ['app', 'admin']\nconst DefaultMode = 'admin'   // KISS won DRY\n\nexport { Modes, DefaultMode }\n","import React from 'react';\n\nconst Selector = (props) => {\n  const { name, onChange, defaultChecked } = props\n\n  const handleChange = (e) => {\n    if (onChange) onChange(e.target.value);\n  }\n\n  return (\n    <div className=\"selecor\" onChange={handleChange}>\n      { props.children.map( (c, i) =>\n        c.type === Item ? (\n          <Item key={i}\n                {...\n                 {\n                   ...{\n                     name,\n                     defaultChecked: c.props.value === defaultChecked,\n                   },\n                   ...c.props\n                 }\n                }\n          />\n        ): c\n      ) }\n    </div>\n  )\n}\n\nconst Item = ({ name, value, label, defaultChecked }) => {\n  const id = `${name}-${value}`\n\n  return (\n    <div>\n      <input id={id} type=\"radio\" name={name} value={value}\n             defaultChecked={defaultChecked} />\n      <label htmlFor={id}>{ label }</label>\n    </div>\n  )\n}\n\n\nexport { Selector, Item }\n","import React, {useState} from 'react';\n\n\nconst Menu = ({ className, items }) => {\n  const [state, setState] = useState( {activeItem: null} )\n\n  const handleClick = (e) => {\n    setState({ activeItem: e.target.getAttribute('data-key') })\n  }\n\n  return (\n    <ul className={className}>\n      { items.map(\n          (item, i) => (\n            <li className={item === state.activeItem ? 'active' : ''} key={i}\n                data-key={item} onClick={handleClick}>\n              {item}\n            </li>\n          )\n      )}\n    </ul>\n  )\n\n}\n\nexport { Menu }\n","const getEntriesAPI = async (mode) => (\n  new Promise(\n    (resolve, reject) =>\n      setTimeout(\n        () => {\n          if (mode === 'app') {\n            resolve(['Entry1', 'Entry2', 'Entry3', 'Entry4', 'Entry5'])\n          }\n\n          if (mode === 'admin') {\n            resolve(['AdminEntry1', 'AdminEntry2', 'AdminEntry3'])\n          }\n\n          reject('no entries')\n        },\n        1000)\n  )\n)\n\n\nexport { getEntriesAPI }\n","import React from 'react';\n\n//import logo from './logo.svg';\nimport './App.css';\nimport Logo from './Logo'\n\nimport { Modes, DefaultMode } from './consts'\nimport { Selector, Item } from './Selector'\nimport { Menu } from './Menu'\n\nimport { getEntriesAPI } from './api'\n\nimport memoize from 'fast-memoize';\n\n\n// memoize redundant \"ajax calls\"\nconst getEntries = memoize(getEntriesAPI)\n\n\n// NOTE: react hooks used minimally as not sure it's very mature \"best React practices\"\n\nclass App extends React.Component {\n  state = {\n    mode: DefaultMode,\n    isEntriesActual: false,\n    entries: [],\n    //activeEntry: null,\n  }\n\n  onChange = async (value) => {\n    this.setState( {mode: value} )\n  }\n\n  loadEntries() {\n    getEntries(this.state.mode).then(\n      (entries) => this.setState({\n        entries,\n        isEntriesActual: true,\n      })\n    ).catch(\n      (error) => alert('Entries load error')  // naive alert\n    )\n  }\n\n  componentDidMount() {\n    this.loadEntries()\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (this.state.mode !== prevState.mode) {\n      this.setState( { isEntriesActual: false } )\n    }\n\n    if (!this.state.isEntriesActual) {\n      this.loadEntries()\n    }\n  }\n\n  render() {\n    const { mode, isEntriesActual, entries } = this.state;\n\n    return (\n      <React.Fragment>\n        <header>\n          <Logo src=\"/logo.png\" />\n\n          <Selector name=\"main-selector\" onChange={this.onChange}\n            defaultChecked={mode}\n          >\n            { Modes.map( (m, i) => <Item key={i} value={m} label={`${m} mode`} /> ) }\n          </Selector>\n\n        </header>\n\n\n        <main>\n          { isEntriesActual\n            ? <Menu items={entries} className={`entries ${mode}`} />\n            : <span>Loading...</span>\n          }\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}